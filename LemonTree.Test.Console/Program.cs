using LemonTree.Test.Business.Models;
using LemonTree.Test.Business.Interfaces;
using System.Collections.Generic;
using LemonTree.Test.Business;

namespace LemonTree.Test.Console
{
    class Program
    {
        static void Main(string[] args)
        {
            System.Console.WriteLine("LemonTree Test Start ----------------------------");

            // Once a pawn chess piece reaches the other side of the chess board,
            // the player may "trade" the pawn in for any other chess piece if they choose
            // This is turned off by default. If true, it become a Rook for the purpose of this test
            var tradePawnAllowed = false; 

            // Define all chess pieces to be considered
            var chessPieces = new List<ChessPiece> {
                 new Pawn(tradePawnAllowed)
                ,new Knight()
                ,new Bishop()
                ,new Rook()
                ,new Queen()
                ,new King()
            };

            // Work out the list of 7-digit phone numbers that could be generated for a given chess piece
            // Use a dictionary of chess piece and associated list of 7-digit phone numbers
            var dicChessPiecePhoneNumbers = new Dictionary<IChessPiece, List<string>>();
            foreach (var chessPiece in chessPieces)
            {
                var listOfPhoneNumbers = new List<string>();
                dicChessPiecePhoneNumbers.Add(chessPiece, listOfPhoneNumbers);

                // Try the case where no jumps are used
                System.Console.WriteLine($"Considering chess piece {chessPiece.Name} with NO jumps allowed...");

                var jumpAllowed = false;
                var phoneDigitsList = new List<List<int>>();
                for (int i = 2; i <= 9; i++) // Cannot start with 1
                {
                    // Get all 7-digit phone number sequences starting with number "i"
                    phoneDigitsList = chessPiece.GetAllSequences(i, jumpAllowed);

                    // Convert to a text representation, i.e. NNN-NNNN
                    foreach (var phoneDigits in phoneDigitsList)
                    {
                        listOfPhoneNumbers.Add(Utility.Get7DigitPhoneNumber(phoneDigits));
                    }
                    System.Console.WriteLine($"      Starting with {i} digit, found {phoneDigitsList.Count} possible phone numbers");
                }

                // Try the case where jumps are used, where applicable
                System.Console.WriteLine($"Considering chess piece {chessPiece.Name} with jumps allowed, where applicable...");

                jumpAllowed = true;
                phoneDigitsList.Clear();
                for (int i = 2; i <= 9; i++) // Cannot start with 1
                {
                    // Get all 7-digit phone number sequences starting with number "i"
                    phoneDigitsList = chessPiece.GetAllSequences(i, jumpAllowed);

                    // Convert to a text representation, i.e. NNN-NNNN
                    foreach (var phoneDigits in phoneDigitsList)
                    {
                        listOfPhoneNumbers.Add(Utility.Get7DigitPhoneNumber(phoneDigits));
                    }
                    System.Console.WriteLine($"      Starting with {i} digit, found {phoneDigitsList.Count} possible phone numbers");
                }
            }

            // Note that same 7-digit phone numbers may be generated by different chess pieces
            DisplayResults(dicChessPiecePhoneNumbers);

            System.Console.WriteLine("LemonTree Test End ----------------------------");
        }

        private static void DisplayResults(Dictionary<IChessPiece, List<string>> dicChessPiecePhoneNumbers)
        {
            System.Console.WriteLine("Results ===========================================");
            foreach (var kv in dicChessPiecePhoneNumbers)
            {
                var chessPiece = kv.Key;
                var phoneNumbers = kv.Value;

                System.Console.WriteLine($"Case of {chessPiece.Name}: Total number of valid 7-digit phone numbers: {phoneNumbers.Count}");
                foreach (var phoneNumber in phoneNumbers)
                {
                    System.Console.Write(phoneNumber);
                    System.Console.Write(", ");
                }
                System.Console.WriteLine("");
            }
        }
    }
}
